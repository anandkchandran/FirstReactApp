{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","search","fetch","then","response","json","users","setState","catch","reason","console","log","this","filteredMonster","filter","toLowerCase","includes","e","target","value","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.39010f0e.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nexport const Card = (props) => {\n    return (\n        <div className='card-container'>\n            <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\n            <h1>{props.monster.name}</h1>\n            <h2>{props.monster.email}</h2>\n        </div>\n    )\n}","import React from 'react';\nimport './card-list.styles.css';\nimport {Card} from '../card/card.component';\n\n//props is any parameter that is passed as argument\n//props.children is any value that is passes within html tags\nexport const CardList = (props) => {\n    return <div className=\"card-list\">\n        {props.monsters.map((monster)=>{\n            return <Card monster={monster}/>\n        })}\n       </div>\n}","import React from 'react';\nimport './search-box.styles.css'\n\nexport const SearchBox = ({placeholder, handleChange}) => {\n    return (\n    <input type='search' className='search' placeholder={placeholder} onChange={handleChange}></input>\n    );\n}","import React, { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      search: ''\n    }\n  }\n  //lifecycle method\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => {\n      // here response is a promise \n      // can consume promise only once;\n      return response.json();\n    }).then(users => {\n      this.setState({ monsters: users });\n    }).catch(reason => {\n      console.log(reason);\n    })\n  }\n\n  render() {\n    const { monsters, search } = this.state;\n    const filteredMonster = monsters.filter((monster) => {\n      return monster.name.toLowerCase().includes(search.toLowerCase());\n    })\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n          {/*\n        anonymous function : \n        () => {\n          return something\n        }\n        or \n        (ab) => (cd) //kind of IIFE cd is invoked automatically without return statement.\n         */}\n          {/*\n            set state will not reflect immediately,\n            this can be overcome by using the call back function in the setState\n          */}\n          {/*<input type='search' placeholder='Search Monsters' onChange={(e)=>{\n            this.setState({search: e.target.value},()=>{\n              console.log(this.state.search);\n            });\n            \n          }}></input>*/}\n          <SearchBox placeholder='Search Monsters' handleChange={(e) => {\n            this.setState({ search: e.target.value }, () => {\n              console.log(this.state.search);\n            });\n\n          }}></SearchBox>\n          <CardList monsters={filteredMonster}>\n            {/*\n              sending as props intead of child \n              children props are values that are passed within html tags like below\n              <CardList prop = {}>children</CardList>\n              */\n            }\n            {/*this.state.monsters.map((monster) => {\n              return <h1 key={monster.id} name = {monster.name}></h1>\n            })*/}\n          </CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}